import java.util.ArrayList;
import java.util.Scanner;

class Room {
    int roomNumber;
    String roomType;
    boolean isOccupied;

    public Room(int roomNumber, String roomType) {
        this.roomNumber = roomNumber;
        this.roomType = roomType;
        this.isOccupied = false;
    }

    @Override
    public String toString() {
        return String.format("Room Number: %d, Type: %s, Occupied: %b", roomNumber, roomType, isOccupied);
    }
}

class Customer {
    int customerId;
    String name;
    int roomNumber;

    public Customer(int customerId, String name, int roomNumber) {
        this.customerId = customerId;
        this.name = name;
        this.roomNumber = roomNumber;
    }

    @Override
    public String toString() {
        return String.format("Customer ID: %d, Name: %s, Room Number: %d", customerId, name, roomNumber);
    }
}

public class HotelManagementSystem {
    private ArrayList<Room> rooms = new ArrayList<>();
    private ArrayList<Customer> customers = new ArrayList<>();
    private Scanner scanner = new Scanner(System.in);

    public void addRoom() {
        System.out.print("Enter Room Number: ");
        int roomNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Room Type (Single/Double/Suite): ");
        String roomType = scanner.nextLine();
        rooms.add(new Room(roomNumber, roomType));
        System.out.println("Room added successfully!");
    }

    public void viewRooms() {
        System.out.println("\n--- Room List ---");
        for (Room room : rooms) {
            System.out.println(room);
        }
    }

    public void bookRoom() {
        System.out.print("Enter Customer ID: ");
        int customerId = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Customer Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Room Number to Book: ");
        int roomNumber = scanner.nextInt();

        Room room = findRoomByNumber(roomNumber);
        if (room == null) {
            System.out.println("Room not found!");
            return;
        }
        if (room.isOccupied) {
            System.out.println("Room is already occupied!");
            return;
        }
        room.isOccupied = true;
        customers.add(new Customer(customerId, name, roomNumber));
        System.out.println("Room booked successfully!");
    }

    public void checkoutRoom() {
        System.out.print("Enter Room Number for Checkout: ");
        int roomNumber = scanner.nextInt();
        Room room = findRoomByNumber(roomNumber);
        if (room == null || !room.isOccupied) {
            System.out.println("Room is not currently occupied!");
            return;
        }

        room.isOccupied = false;
        customers.removeIf(customer -> customer.roomNumber == roomNumber);
        System.out.println("Room checkout completed successfully!");
    }

    public void viewCustomers() {
        System.out.println("\n--- Customer List ---");
        for (Customer customer : customers) {
            System.out.println(customer);
        }
    }

    private Room findRoomByNumber(int roomNumber) {
        for (Room room : rooms) {
            if (room.roomNumber == roomNumber) {
                return room;
            }
        }
        return null;
    }

    public void menu() {
        while (true) {
            System.out.println("\n--- Hotel Management System ---");
            System.out.println("1. Add Room");
            System.out.println("2. View Rooms");
            System.out.println("3. Book Room");
            System.out.println("4. Checkout Room");
            System.out.println("5. View Customers");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            switch (choice) {
                case 1 -> addRoom();
                case 2 -> viewRooms();
                case 3 -> bookRoom();
                case 4 -> checkoutRoom();
                case 5 -> viewCustomers();
                case 6 -> {
                    System.out.println("Exiting...");
                    return;
                }
                default -> System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    public static void main(String[] args) {
        HotelManagementSystem hotel = new HotelManagementSystem();
        hotel.menu();
    }
}
